#!/usr/bin/env bash

# progress output that comfortably fits in 80 columns ...
# use it like: ffmpeg-recode -l info [...] 2>&1 | ffmpeg-progress
ffmpeg-progress() {
  stdbuf -o0 tr "\r" "\n" \
    | grep --line-buffered -E "(Stream|Duration:|^frame=|^\+ ffmpeg|with (error|return) code)" \
    | while read -r line; do
      # print stream lines as background info
      if [[ $line =~ Stream\ (.*)$ ]]; then
        continue # this breaks output because they appear after duration :(
      # show the full ffmpeg command from ffmpeg-recode
      elif [[ $line =~ ^\+\ ffmpeg ]]; then
        printf '\033[34m%s\033[0m\n' "$line"
      # show probable errors as well
      elif [[ $line =~ with\ (error|return)\ code ]]; then
        printf '\r\033[33m%s\033[0m\n' "$line"
      # read the file duration from preamble
      elif [[ $line =~ Duration: ]]; then
        duration=$(sed "s/.*Duration: \+\([0-9:.]\+\),.*/\1/" <<<"$line")
        printf ' %11s / %11s %10s  %5s %8s   %14s\n' current total size fps speed bitrate
        printf '\033[2K\r %11s / %11s %s' "--:--:--" "$duration" "(no output yet)"
      # no informationn available yet or file is finalizing
      elif [[ $line =~ time=N/A ]]; then
        continue # just skip these lines
      # parse status line into BASH_REMATCH and reprint in different format
      # test & modify at: https://regex101.com/r/THxNA4/3
      elif [[ $line =~ ^frame=\ *(N/A|-?[0-9]+)\ +fps=\ *(N/A|-?[0-9.]+)\ +q=\ *(N/A|-?[0-9.]+)\ +L?size=\ *(N/A|-?[0-9]+[kKmM]i?B)?\ +time=\ *(N/A|-?[0-9:.]+)\ +bitrate=\ *(N/A|-?[0-9.]+[kKmM]i?bits?/s)?\ +(dup=\ *-?[0-9]+\ +)?(drop=\ *-?[0-9]+\ +)?speed=\ *(N/A|-?[0-9.]+x).*$ ]]; then
        frame=${BASH_REMATCH[1]}; fps=${BASH_REMATCH[2]}; qfactor=${BASH_REMATCH[3]};
        size=${BASH_REMATCH[4]}; time=${BASH_REMATCH[5]}; bitrate=${BASH_REMATCH[6]};
        speed=${BASH_REMATCH[9]};
        size=$(echo "$size" | awk '{ printf "%.1fMiB", $1/1024 }')
        printf '\033[2K\r %11s / %11s %10s  %5s %8s   %14s' \
          "$time" "$duration" "$size" "$fps" "$speed" "$bitrate"
      else
        # print any non-parsed lines, to see if some more patterns need to be matched
        printf "\n%s (failed to parse)\n" "$line"
      fi
    done
    echo
}

ffmpeg-progress "$@"
