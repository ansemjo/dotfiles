#!/usr/bin/env bash

# this idea came up after reading a hackernews comment on an article about the
# drunken bishop walk, whether "hash to jpeg" could not be used .. this script
# does not care about "perceptible information compression" but sure, you can
# pipe raw data into imagemagick to create a picture ...
#  * https://news.ycombinator.com/item?id=28090882
#  * (related) https://github.com/ansemjo/randomart

if  ! command -v magick >/dev/null  || \
    ! command -v openssl >/dev/null || \
    ! command -v feh >/dev/null; then
  echo >&2 "pnghash requires imagemagick, openssl and feh"
  exit 1
fi


pnghash() {
  
  # format specifier as "width x height : bitdepth", useful ones are:
  #  4x4:4 --> 192 bits
  #  4x8:2 --> 192 bits
  #  8x8:1 --> 192 bits
  #  8x8:2 --> 384 bits
  format="${1:-4x4:2}"

  # the data-to-png function with imagemagick, scale for better visibility
  img() { magick -size "$1" -depth "$2" RGB:- -scale 400x400 PNG:-; }

  # view in a borderless feh window
  view() { feh --borderless - & }

  # whatever input data is assumed to be on /dev/stdin ..
  # hash and maybe truncate to appropriate length
  case "$format" in
    "4x4:4") openssl dgst -sha384 -binary | head -c24 | img "4x4" "4" | view ;;
    "4x8:2") openssl dgst -sha384 -binary | head -c24 | img "4x8" "2" | view ;;
    "8x4:2") openssl dgst -sha384 -binary | head -c24 | img "8x4" "2" | view ;;
    "8x8:1") openssl dgst -sha384 -binary | head -c24 | img "8x8" "1" | view ;;
    "8x8:2") openssl dgst -sha384 -binary | img "8x8" "2" | view ;;
    *) echo "ERR: unknown format, choose: (192) 4x4:4, 4x8:2, 8x4:2, 8x8:1, (384) 8x8:2" >&2; return 1 ;;
  esac

}
pnghash "$@"
