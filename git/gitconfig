[init]
  defaultBranch = main

[push]
  default = simple
  followTags = true

[pull]
  ff = only

[commit]
  gpgSign = false

[tag]
  gpgSign = false

[color]
  ui = auto

[format]
  pretty = block

[pretty]
  mini  = format:%C(auto,yellow)%h %C(auto,reset)%C(auto)%s%d%C(auto,blue)% GK
  line  = format:%C(auto,yellow)%h %C(auto,green)%ci%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(auto,blue)%G? %C(auto,reset)%C(auto)%s%d %C(auto,dim)[%cN%C(auto,blue)% GK%C(auto,reset)%C(auto,dim)]%C(auto)
  refline = format:%C(auto,yellow)%h %C(auto,green)%gD %C(auto,blue)%ci%x08%x08%x08%x08%x08%x08 %C(auto,reset)%C(auto)%gs%d%C(auto)
  block = format:commit %C(auto,yellow)%H%C(auto)%d\ndate: %C(auto,green)%cD %C(auto,dim)(%cr)\nfrom: %C(auto,magenta)%cN <%cE>%C(auto,blue)% GK\nsubject: %C(auto,bold)%s\n%+b
  changelog = format:%C(auto,yellow)%h %C(auto,reset)%C(auto)%s%C(auto)

[log]
  decorate = auto

[alias]

  # add pieces of files individually
  patch = add --patch

  # amend the last commit with a signature
  signlast = commit --amend --gpg-sign

  # show log in a graph with different branches
  graph = log --graph --all --pretty=line
  gr = "!git graph -n 20 --pretty=mini"

  # show a diff of files staged so far
  staged = diff --cached

  # show the stats of a commit
  stat = show --stat
  latest = "!git stat"

  # various shorthands
  la = log --stat --pretty=block
  ls = log -n 20 --pretty=mini
  ll = log -n 20 --pretty=line
  st = status --short --branch
  co = checkout
  cm = commit
  br = branch --verbose
  re = remote --verbose
  rl = reflog -n 20 --pretty=refline

  # show current head commit hash
  hash = describe --match ^$ --always --abbrev=0

  # semver versioning
  new-version = "!f(){ V=$(git describe --abbrev=0 --tags); [[ $1 =~ (major|minor|patch) ]] && I=$1 && shift; V=$(semver \"${V:-0.0.0}\" -i $I) && git tag \"$V\" ${@:--a -em \"$(echo; echo; git changelog)\"}; };f"
  nv = "!git new-version"

  # push changes to a remote and make it upstream
  upstream = push --set-upstream --all

  # clone a repository and create a new tree as if it was the first commit
  clone-restart = "!f(){ { test ! -d .git || (echo 'this is an existing git directory' && false); } && git init && git fetch -n --depth 1 \"${1:?need clone url}\" && git reset --hard \"$(git commit-tree FETCH_HEAD^{tree} -m 'a new hope')\" && git expire-gc-fsck && git commit --amend; };f"

  # ~ squash history, begin a new tree
  # https://stackoverflow.com/a/23486788
  restart = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-just do git}\") && git commit --amend; };f"

  # extensive cleanup of dangling blobs etc.
  rinse = "!f(){ set -x && git reflog expire --expire-unreachable=now --all --verbose && git gc --prune=now && git prune && git fsck --full; { set +x; } 2>/dev/null; };f"

  # show changed files in commit
  show-changed = show --name-status

  # show current branch name for scripting
  branch-name = rev-parse --abbrev-ref --symbolic-full-name HEAD

  # show changelog / list of commits since last tag
  changelog = "!f(){ git log \"${1:-$(git describe --tags --abbrev=0)}\"..HEAD --pretty=changelog; };f"
  cl = "!git changelog"

  # show the hash of the initial commit
  initial-commit = rev-list --max-parents=0 HEAD

  # bundle all, entire repo
  bundle-repo = "!f(){ git bundle create \"${1:?target file or -}\" --all; };f"

  # imitates a compressed github download
  download = "!f(){ ref=\"${1:-master}\"; name=\"${2:-$(basename \"$PWD\")}\"; git archive \"$ref\" --prefix=\"$name-$ref/\" | gzip -n; };f"

  # show authors with number of commits
  authors = shortlog --numbered --summary --email

  # show files with most commits (https://stackoverflow.com/a/5670168)
  topfiles = "!f(){ git rev-list --objects --all \"$@\" | awk '$2' | awk '{$1=\"\"}1' | sort | uniq -c | sort -rn | head -20; };f"

  # output directory structure or a single file at a particular ref
  output = "!f(){ if [ -z \"$1\" ]; then echo \"git output <ref> [<path/to/file>]\" >&2; return 1; fi; if [ -z \"$2\" ]; then git archive \"$1\" | tar tv; else git archive \"$1\" | tar x --to-stdout \"$2\"; fi; };f"

  # simply clean up everything that does not belong
  cc = clean -idx

  # amend changes to previous commit without asking for message again
  amend = commit --amend --no-edit

  # output a revision count and hash as a universal version description
  revision = "!f() { printf 'r%s-g%s\\n' \"$(git rev-list --count HEAD)\" \"$(git describe --always --abbrev=7 --match '^$')\"; };f"

  # search in commit sources and display the selected commit
  search = "!f() { git log -S \"${1}\" --source --all --pretty=line --color | fzf --ansi | cut -d' ' -f1 | xargs -r git show; };f"

[url "git@github.com:"]
  insteadOf = github:
  pushInsteadOf = https://github.com/

[url "git@gist.github.com:"]
  insteadOf = gist:
  pushInsteadOf = https://gist.github.com/
