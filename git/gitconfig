[init]
  # default branch name for new repositories
  defaultBranch = main # or "trunk"

[push]
  # push same name and automatically setup remotes
  default = simple
  autoSetupRemote = true
  # push tags reachable from refs being pushed
  followTags = true

[fetch]
  # automatically remove deleted remote-tracking branches
  prune = true
  pruneTags = true

[pull]
  # only pull when fast-forward is possible
  ff = only

[merge]
  # show extra information for conflicts
  conflictstyle = zdiff3

[rebase]
  # stash and pop automatically
  autostash = true
  # reorder and apply fixup commits etc. automatically
  autosquash = true
  # prevent deleting commits in rebase
  missingCommitsCheck = error
  # force-update branches that point to commits being rebased
  updateRefs = true

[commit]
  # print useful information in editor during commit
  status = true
  verbose = true
  # avoid gnupg signatures
  gpgSign = false

[tag]
  # sort by most recent
  sort = version:refname
  # avoid gnupg signatures
  gpgSign = false

[branch]
  # sort by most recently used
  sort = -committerdate

[diff]
  # use histograms, which handle reordering better
  algorithm = histogram
  # show moved lines in different colour
  colorMoved = default
  # replace a/b with i-ndex, w-ork, c-ommit, o-bject
  mnemonicPrefix = true
  # detect renames
  renames = true

[color]
  # use colors
  ui = auto

[color "diff"]
  meta = yellow
  frag = cyan
  func = 146 # lavender
  commit = yellow
  old = red
  new = green
  whitespace = red reverse

[column]
  # use columns
  ui = auto

[format]
  # default pretty-printing format from below
  pretty = block

[pretty]
  # a few nice pretty-printing formats
  mini  = format:%C(auto,yellow)%h %C(auto,reset)%C(auto)%s%d%C(auto,blue)% GK
  line  = format:%C(auto,yellow)%h %C(auto,green)%ci%x08%x08%x08%x08%x08%x08%x08%x08%x08 %C(auto,blue)%G? %C(auto,reset)%C(auto)%s%d %C(auto,dim)[%cN%C(auto,blue)% GK%C(auto,reset)%C(auto,dim)]%C(auto)
  refline = format:%C(auto,yellow)%h %C(auto,green)%gD %C(auto,blue)%ci%x08%x08%x08%x08%x08%x08 %C(auto,reset)%C(auto)%gs%d%C(auto)
  block = format:commit %C(auto,yellow)%H%C(auto)%d\ndate: %C(auto,green)%cD %C(auto,dim)(%cr)\nfrom: %C(auto,magenta)%cN <%cE>%C(auto,blue)% GK\nsubject: %C(auto,bold)%s\n%+b
  changelog = format:%C(auto,yellow)%h %C(auto,reset)%C(auto)%s%C(auto)

[log]
  # show additional ref info
  decorate = auto

# remote URL replacements
[url "git@github.com:"]
  insteadOf = github:
  pushInsteadOf = https://github.com/
[url "git@gist.github.com:"]
  insteadOf = gist:
  pushInsteadOf = https://gist.github.com/


[alias]

  # add pieces of files individually
  patch = add --patch

  # show log in a graph with different branches
  graph = log --graph --all --pretty=line
  gr = "!git graph -n 20 --pretty=mini"

  # show a diff of files staged so far
  staged = diff --cached

  # unstage a file change
  unstage = restore --staged

  # show the stats of a commit
  stat = show --stat
  latest = "!git stat"

  # various shorthands
  la = log --stat --pretty=block
  ls = log -n 20 --pretty=mini
  ll = log -n 20 --pretty=line
  st = status --short --branch
  co = checkout
  br = branch --verbose
  re = remote --verbose
  ref = reflog -n 20 --pretty=refline

  # interactively clean up everything
  cc = clean -idx

  # show current head commit hash
  hash = describe --match ^$ --always --abbrev=0
  
  # show the hash of the initial commit(s)
  hash-initials = rev-list --max-parents=0 HEAD

  # semver versioning
  new-version = "!f(){ V=$(git describe --abbrev=0 --tags); [[ $1 =~ (major|minor|patch) ]] && I=$1 && shift; V=$(semver \"${V:-0.0.0}\" -i $I) && git tag \"$V\" ${@:--a -em \"$(echo; echo; git changelog)\"}; };f"
  nv = "!git new-version"

  # push changes to a remote and make it upstream
  upstream = push --set-upstream --all

  # clone a repository and create a new tree as if it was the first commit
  clone-restart = "!f(){ { test ! -d .git || (echo 'this is an existing git directory' && false); } && git init && git fetch -n --depth 1 \"${1:?need clone url}\" && git reset --hard \"$(git commit-tree FETCH_HEAD^{tree} -m 'a new hope')\" && git expire-gc-fsck && git commit --amend; };f"

  # ~ squash history, begin a new tree
  # https://stackoverflow.com/a/23486788
  squash-history = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-just do git}\") && git commit --amend; };f"

  # extensive cleanup of dangling blobs etc.
  gc-rinse = "!f(){ set -x && git reflog expire --expire-unreachable=now --all --verbose && git gc --prune=now && git prune && git fsck --full; { set +x; } 2>/dev/null; };f"
  rinse = "!git gc-rinse"

  # show changed files in commit
  show-changed = show --name-status

  # show current branch name for scripting
  branch-name = rev-parse --abbrev-ref --symbolic-full-name HEAD

  # show changelog / list of commits since last tag
  changelog = "!f(){ git log \"${1:-$(git describe --tags --abbrev=0)}\"..HEAD --pretty=changelog; };f"

  # bundle all, entire repo
  bundle-repo = "!f(){ git bundle create \"${1:?target file or -}\" --all; };f"

  # imitates a compressed github download
  download = "!f(){ ref=\"${1:?branch or ref}\"; name=\"${2:-$(basename \"$PWD\")}\"; git archive \"$ref\" --prefix=\"$name-$ref/\" | gzip -n; };f"

  # show authors with number of commits
  rank-authors = shortlog --numbered --summary --email
  authors = "!git rank-authors"

  # show files with most commits (https://stackoverflow.com/a/5670168)
  rank-files = "!f(){ git rev-list --objects --all \"$@\" | awk '$2' | awk '{$1=\"\"}1' | sort | uniq -c | sort -rn | head -20; };f"
  topfiles = "!git rank-files"

  # output directory structure or a single file at a particular ref
  output = "!f(){ if [ -z \"$1\" ]; then echo \"git output <ref> [<path/to/file>]\" >&2; return 1; fi; if [ -z \"$2\" ]; then git archive \"$1\" | tar tv; else git archive \"$1\" | tar x --to-stdout \"$2\"; fi; };f"

  # amend changes to previous commit without asking for message again
  amend = commit --amend --no-edit

  # output a revision count and hash as a universal version description
  revision = "!f() { printf 'r%s-g%s\\n' \"$(git rev-list --count HEAD)\" \"$(git describe --always --abbrev=7 --match '^$')\"; };f"
  rev = "!git revision"

  # search in commit sources and display the selected commit
  search = "!f() { git log -S \"${1}\" --source --all --pretty=line --color | fzf --ansi | cut -d' ' -f1 | xargs -r git show; };f"

